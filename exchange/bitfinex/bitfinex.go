package main

import (
	// "crypto/md5"
	// "database/sql"
	// "encoding/hex"

	"fmt"
	"net"
	"time"

	// "strconv"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"strings"
	// substring
	// "time"
	// "github.com/PuerkitoBio/goquery"
	//_ "github.com/go-sql-driver/mysql"
)

type AutoGenerated [][]interface{}

func checkErr(err error) {
	if err != nil {
		panic(err)
	}
}

//Bitfinex的api解析
func main() {
	//var s string
	//var symbol string
	var resymbol string
	var coin_name string
	var base_coin_name string
	exchange_apiurl := "https://api.bitfinex.com/v2/tickers?symbols=ALL"
	client := createHTTPClient()
	request, _ := http.NewRequest("GET", exchange_apiurl, nil)
	request.Header.Set("Accept-Charst", "UTF-8")
	resp, _ := client.Do(request)
	data, _ := ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	var data_total AutoGenerated
	err := json.Unmarshal([]byte(data), &data_total)
	if err != nil {
		fmt.Println(err)
	}
	for _, v := range data_total {
		var as interface{}
		as = v[0]
		var syt string
		syt = as.(string)
		if strings.Contains(syt, "f") {
			return
		} else {
			// symbol
			symbol := v[0]
			fmt.Println(symbol)
			//24h最新成交价
			last_price := v[7].(float64)
			fmt.Println(last_price)
			// 24h交易对的交易量
			coin_volume := v[8].(float64)
			fmt.Println(coin_volume)
			// 24h最高成交价
			high := v[9].(float64)
			fmt.Println(high)
			// 24h最低成交价
			low := v[10].(float64)
			fmt.Println(low)
			basecoin := [7]string{"_USD", "_EUR", "_GBP", "_JPY", "_BTC", "_ETH", "_EOS"}
			var a interface{}
			a = symbol
			var sy string
			sy = a.(string)
			sym := strings.Replace(sy, "t", "", 1)
			usd_sym := strings.Replace(sym, "USD", basecoin[0], 1)
			eur_sym := strings.Replace(usd_sym, "EUR", basecoin[1], 1)
			gbp_sym := strings.Replace(eur_sym, "GBP", basecoin[2], 1)
			jpy_sym := strings.Replace(gbp_sym, "JPY", basecoin[3], 1)
			btc_sym := strings.Replace(jpy_sym, "BTC", basecoin[4], 1)
			eth_sym := strings.Replace(btc_sym, "ETH", basecoin[5], 1)
			eos_sym := strings.Replace(eth_sym, "EOS", basecoin[6], 1)
			resymbol = eos_sym
			fmt.Println(resymbol)
			c := []byte(eos_sym)
			if string(c[0]) == "_" {
				sym_ok := strings.Replace(eos_sym, "_", "", 1)
				resymbol = sym_ok
			}
			sz := strings.Split(resymbol, "_")
			for i := 0; i < 2; i++ {
				coin_name = sz[0]
				fmt.Println(coin_name)
				base_coin_name = sz[1]
				fmt.Println(base_coin_name)
			}
		}
	}
}

const (
	MaxIdleConns        int = 100
	MaxIdleConnsPerHost int = 100
	IdleConnTimeout     int = 90
)

func createHTTPClient() *http.Client {
	client := &http.Client{
		Transport: &http.Transport{
			Proxy: http.ProxyFromEnvironment,
			DialContext: (&net.Dialer{
				Timeout:   30 * time.Second,
				KeepAlive: 30 * time.Second,
			}).DialContext,
			MaxIdleConns:        MaxIdleConns,
			MaxIdleConnsPerHost: MaxIdleConnsPerHost,
			IdleConnTimeout:     time.Duration(IdleConnTimeout) * time.Second,
		},

		Timeout: 20 * time.Second,
	}
	return client
}
